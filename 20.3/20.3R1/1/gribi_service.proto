// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "gribi_aft.proto";

package gribi;

// gRIBI is a gRPC service which provides an external entity a mechanism through
// which to programmatically inject and remove entries from the system's RIB.
// This is moved to rib_service.japi for now
service gRIBI {
  // Modify provides a bidirectional streaming RPC that can be used to issue
  // modifications to the AFT in the form of ModifyRequest(s).
  // The network element responds (asynchronously) with a ModifyResponse
  // for each ModifyRequest indicating what action was taken, once each
  // Operation within the request has been completed.
  rpc Modify(stream ModifyRequest) returns (stream ModifyResponse);
}

// A single request to add/modify/remove a single AFT entry
message AFTOperation {
        // Associate an ID with this specific request since this allows the client
        // to determine exactly which modifications have been completed in the
        // case that are multiple operations within the AFT.
        uint64 id = 1;

        // Network Instance (aka vrf aka routing-instance) to apply to
        string network_instance = 2;

        // The operation that this request is - either add, replace, or delete
        // any entry from the specific AFT.
        enum Operation {
          // INVALID indicates that the sender did not set the operation, and
          // should be considered an error.
          INVALID = 0;
          // ADD creates an entry within the table, it should fail if the entry
          // already exists.
          ADD = 1;
          // REPLACE replaces an existing entry within a table, it should fail if
          // the entry does not exist. A replace operation should contain all of
          // the relevant fields, such that existing entry is completely replaced
          // with the specified entry.
          REPLACE = 2;
          // DELETE removes an entry from the table, it should fail if the entry
          // does not exist.
          DELETE = 3;
        }
        Operation op = 3;

        oneof entry {
          // Each openconfig.AFT.* message is a protobuf transformed
          // message corresponding to the OpenConfig AFT for that
          // schema.
          // Schema for IPv4UnicastEntry is
          // -network-instances-network-instance-afts-ipv4-unicast-ipv4-entry
          gribi_aft.Afts.Ipv4EntryKey ipv4 = 4;
          // Schema for IPv6UnicastEntry is
          // -network-instances-network-instance-afts-ipv6-unicast-ipv6-entry
          gribi_aft.Afts.Ipv6EntryKey ipv6 = 5;
          // Schema for MPLSLabelEntry is
          // -network-instances-network-instance-afts-mpls-label-entry
          gribi_aft.Afts.LabelEntryKey mpls = 6;
          // Schema for NextHopGroup is
          // -network-instances-network-instance-afts-next-hop-groups-next-hop-group
          gribi_aft.Afts.NextHopGroupKey next_hop_group = 7;
          // Schema for NextHop is
          // -network-instances-network-instance-afts-next-hops-next-hop.
          gribi_aft.Afts.NextHopKey next_hop = 8;
        }
}

// ModifyRequest is a message used by the client to manipulate the state of
// the RIB on the target device.
message ModifyRequest {
  // A group of requests to add/modify/remove a single AFT entry
  repeated AFTOperation operation = 1;
}


// A response to add/modify/remove a single AFT entry
message AFTResult {
  // The ID corresponds to the operation ID that was
  // specified in the AFTOperation.
  uint64 id = 1;

  // Status of the operation. Since this is within a
  // stream we do not use status.proto to respond since
  // this would fail the entire RPC connection, and hence
  // have in-band errors.
  enum Status {
    UNSET = 0;
    OK = 1;
    FAILED = 2;
  }
  Status status = 2;
}

// A set of AFT responses.
message ModifyResponse {
  // One or more responses to requests. Clients should expect that
  // the ModifyResponse *does not* correlate to the ModifyRequest's
  // contents.
  repeated AFTResult result = 1;
}

