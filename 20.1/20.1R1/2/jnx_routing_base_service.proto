//
// Copyright 2018-2019, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

// [brief]: JET Routing Base Package
package jnx.jet.routing.base;

// [version]: 0.0.0
import "jnx_common_base_types.proto";

// [changes]: Initial version
option (jnx.jet.common.japi_version) = "0.0.0";

option (jnx.jet.common.junos_release) = "19.2";

// [brief]: Base service for PRPD Infra Operations.
// [detail]: Provides base infra operations add, delete and get for route purge timer.
service Base {
    // [brief]: Configure purge timer for the client.
    // [detail]: Configure a purge timer for the client so that server
    // side will retain the client installed routes till this time after
    // client disconnects and provide sufficient time for the client to
    // reconnect if possible. The default purge timer is 120 seconds.
    // The valid purge timer range is between 1 and 1000 seconds.
    rpc RoutePurgeTimerAdd (RoutePurgeTimerAddRequest) returns (RoutePurgeTimerAddResponse) {}

    // [brief]: Delete the purge timer for the client.
    // [detail]: Delete a previously configured purge timer for the client.
    rpc RoutePurgeTimerDelete (RoutePurgeTimerDeleteRequest) returns (RoutePurgeTimerDeleteResponse) {}

    // [brief]: Retrieve the purge timer for the client.
    // [detail]: Retrieve the purge timer for the client.
    rpc RoutePurgeTimerGet (RoutePurgeTimerGetRequest) returns (RoutePurgeTimerGetResponse) {}
}

// [brief]: response status code used by sub-code.
// [detail]: response status code used by sub-code.
// [default]: SUCCESS.
enum StatusCode {
    // [brief]: Success.
    SUCCESS        = 0;
    // [brief]: Invalid parameters.
    INVALID_PARAMS = 1;
}

// [brief]: Route purge timer add request message.
// [detail]: Route purge timer add request message to set purge timer
// for the client.
message RoutePurgeTimerAddRequest {
    // [brief]: Purge time to be configured for the client.
    // [detail]: The default purge timer is 120 seconds.
    // [range]: 1:1000
    uint32      time     = 1;
}

// [brief]: Route purge timer get request message.
// [detail]: Route purge timer get request message.
message RoutePurgeTimerGetRequest {
}

// [brief]: Route purge timer delete request message.
// [detail]: Route purge timer delete request message to delete.
// purge timer for the client.
message RoutePurgeTimerDeleteRequest {
}

// [brief]: Route purge timer add response message.
// [detail]: Response message for the purget timer add request.
message RoutePurgeTimerAddResponse {
    //[brief]: Purge Timer add response status.
    jnx.jet.common.RpcStatus status  = 1;
    //[brief]: Purge Timer add response sub_code.
    StatusCode sub_code       = 2;
}

// [brief]: Route purge timer delete response message.
// [detail]: Route purge timer delete response message.
message RoutePurgeTimerDeleteResponse {
    // [brief]: Purge Timer delete response status.
    jnx.jet.common.RpcStatus status = 1;
    // [brief]: Purge Timer delete response sub_code.
    StatusCode sub_code      = 2;
}

// [brief]: Route purge timer get response message to get purge timer.
// [detail]: Route purge timer get response message to get purge timer for
// the client.
message RoutePurgeTimerGetResponse {
    // [brief]: Purge Timer get response status.
    jnx.jet.common.RpcStatus status = 1;
    // [brief]: Purge Timer get response sub_code.
    StatusCode sub_code      = 2;
    // [brief]: Purge time in seconds configured for the client.
    // [range]: 1:1000
    uint32 time              = 3;
}
